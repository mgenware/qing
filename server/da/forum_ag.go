/*
 * Copyright (C) The Qing Project. All rights reserved.
 *
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */

/******************************************************************************************
 * This file was automatically generated by mingru (https://github.com/mgenware/mingru)
 * Do not edit this file manually, your changes will be overwritten.
 ******************************************************************************************/

package da

import (
	"fmt"
	"time"

	"github.com/mgenware/mingru-go-lib"
)

type ForumAGType struct {
}

var Forum = &ForumAGType{}

// ------------ Actions ------------

func (mrTable *ForumAGType) DeleteItem(mrQueryable mingru.Queryable, id uint64) error {
	result, err := mrQueryable.Exec("DELETE FROM `forum` WHERE `id` = ?", id)
	return mingru.CheckOneRowAffectedWithError(result, err)
}

func (mrTable *ForumAGType) InsertItem(mrQueryable mingru.Queryable, orderIndex uint, rawCreatedAt time.Time, groupID *uint64, fpostCount uint, status uint8, name string, descHTML string) (uint64, error) {
	result, err := mrQueryable.Exec("INSERT INTO `forum` (`order_index`, `created_at`, `group_id`, `fpost_count`, `status`, `name`, `desc`) VALUES (?, ?, ?, ?, ?, ?, ?)", orderIndex, rawCreatedAt, groupID, fpostCount, status, name, descHTML)
	return mingru.GetLastInsertIDUint64WithError(result, err)
}

type ForumAGSelectForumResult struct {
	DescHTML     string    `json:"descHTML,omitempty"`
	FpostCount   uint      `json:"fpostCount,omitempty"`
	ID           uint64    `json:"id,omitempty"`
	Name         string    `json:"name,omitempty"`
	RawCreatedAt time.Time `json:"-"`
}

func (mrTable *ForumAGType) SelectForum(mrQueryable mingru.Queryable, id uint64) (ForumAGSelectForumResult, error) {
	var result ForumAGSelectForumResult
	err := mrQueryable.QueryRow("SELECT `id`, `name`, `desc`, `created_at`, `fpost_count` FROM `forum` WHERE `id` = ?", id).Scan(&result.ID, &result.Name, &result.DescHTML, &result.RawCreatedAt, &result.FpostCount)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (mrTable *ForumAGType) SelectForumIDsForGroup(mrQueryable mingru.Queryable, groupID uint64) ([]uint64, error) {
	rows, err := mrQueryable.Query("SELECT `id` FROM `forum` WHERE `group_id` = ?", groupID)
	if err != nil {
		return nil, err
	}
	var result []uint64
	defer rows.Close()
	for rows.Next() {
		var item uint64
		err = rows.Scan(&item)
		if err != nil {
			return nil, err
		}
		result = append(result, item)
	}
	err = rows.Err()
	if err != nil {
		return nil, err
	}
	return result, nil
}

func (mrTable *ForumAGType) SelectGroupID(mrQueryable mingru.Queryable, id uint64) (*uint64, error) {
	var result *uint64
	err := mrQueryable.QueryRow("SELECT `group_id` FROM `forum` WHERE `id` = ?", id).Scan(&result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type ForumAGSelectInfoForEditingResult struct {
	DescHTML string `json:"descHTML,omitempty"`
	Name     string `json:"name,omitempty"`
}

func (mrTable *ForumAGType) SelectInfoForEditing(mrQueryable mingru.Queryable, id uint64) (ForumAGSelectInfoForEditingResult, error) {
	var result ForumAGSelectInfoForEditingResult
	err := mrQueryable.QueryRow("SELECT `name`, `desc` FROM `forum` WHERE `id` = ?", id).Scan(&result.Name, &result.DescHTML)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (mrTable *ForumAGType) SelectThreads(mrQueryable mingru.Queryable, forumID *uint64, page int, pageSize int) ([]ThreadFeedResult, bool, error) {
	if page <= 0 {
		err := fmt.Errorf("invalid page %v", page)
		return nil, false, err
	}
	if pageSize <= 0 {
		err := fmt.Errorf("invalid page size %v", pageSize)
		return nil, false, err
	}
	limit := pageSize + 1
	offset := (page - 1) * pageSize
	max := pageSize
	rows, err := mrQueryable.Query("SELECT `f_post`.`id`, `f_post`.`user_id`, `join_1`.`name`, `join_1`.`icon_name`, `f_post`.`created_at`, `f_post`.`modified_at`, `f_post`.`title`, `f_post`.`likes`, `f_post`.`cmt_count`, `f_post`.`last_replied_at` FROM `f_post` AS `f_post` INNER JOIN `user` AS `join_1` ON `join_1`.`id` = `f_post`.`user_id` WHERE `f_post`.`forum_id` = ? ORDER BY `f_post`.`last_replied_at` LIMIT ? OFFSET ?", forumID, limit, offset)
	if err != nil {
		return nil, false, err
	}
	result := make([]ThreadFeedResult, 0, limit)
	itemCounter := 0
	defer rows.Close()
	for rows.Next() {
		itemCounter++
		if itemCounter <= max {
			var item ThreadFeedResult
			err = rows.Scan(&item.ID, &item.UserID, &item.UserName, &item.UserIconName, &item.RawCreatedAt, &item.RawModifiedAt, &item.Title, &item.Likes, &item.CmtCount, &item.LastRepliedAt)
			if err != nil {
				return nil, false, err
			}
			result = append(result, item)
		}
	}
	err = rows.Err()
	if err != nil {
		return nil, false, err
	}
	return result, itemCounter > len(result), nil
}

func (mrTable *ForumAGType) UpdateInfo(mrQueryable mingru.Queryable, id uint64, name string, descHTML string) error {
	result, err := mrQueryable.Exec("UPDATE `forum` SET `name` = ?, `desc` = ? WHERE `id` = ?", name, descHTML, id)
	return mingru.CheckOneRowAffectedWithError(result, err)
}
