/******************************************************************************************
 * This code was automatically generated by mingru (https://github.com/mgenware/mingru)
 * Do not edit this file manually, your changes will be overwritten.
 ******************************************************************************************/

package da

import (
	"github.com/mgenware/go-packagex/v5/dbx"
)

// TableTypeUser ...
type TableTypeUser struct {
}

// User ...
var User = &TableTypeUser{}

// ------------ Actions ------------

// AddUserWithNameInternal ...
func (da *TableTypeUser) AddUserWithNameInternal(queryable dbx.Queryable, email string, name string) (uint64, error) {
	result, err := queryable.Exec("INSERT INTO `user` (`email`, `name`, `icon_name`, `created_time`, `company`, `website`, `location`, `bio`, `post_count`) VALUES (?, ?, '', UTC_TIMESTAMP(), '', '', '', NULL, 0)", email, name)
	return dbx.GetLastInsertIDUint64WithError(result, err)
}

// UserTableSelectEditingDataResult ...
type UserTableSelectEditingDataResult struct {
	ID       uint64  `json:"-"`
	Name     string  `json:"name,omitempty"`
	IconName string  `json:"-"`
	Location string  `json:"location,omitempty"`
	Company  string  `json:"company,omitempty"`
	Website  string  `json:"website,omitempty"`
	Bio      *string `json:"bio,omitempty"`
}

// SelectEditingData ...
func (da *TableTypeUser) SelectEditingData(queryable dbx.Queryable, id uint64) (*UserTableSelectEditingDataResult, error) {
	result := &UserTableSelectEditingDataResult{}
	err := queryable.QueryRow("SELECT `id`, `name`, `icon_name`, `location`, `company`, `website`, `bio` FROM `user` WHERE `id` = ?", id).Scan(&result.ID, &result.Name, &result.IconName, &result.Location, &result.Company, &result.Website, &result.Bio)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// SelectIconName ...
func (da *TableTypeUser) SelectIconName(queryable dbx.Queryable, id uint64) (string, error) {
	var result string
	err := queryable.QueryRow("SELECT `icon_name` FROM `user` WHERE `id` = ?", id).Scan(&result)
	if err != nil {
		return result, err
	}
	return result, nil
}

// SelectIdFromEmail ...
func (da *TableTypeUser) SelectIdFromEmail(queryable dbx.Queryable, email string) (uint64, error) {
	var result uint64
	err := queryable.QueryRow("SELECT `id` FROM `user` WHERE `email` = ?", email).Scan(&result)
	if err != nil {
		return result, err
	}
	return result, nil
}

// UserTableSelectProfileResult ...
type UserTableSelectProfileResult struct {
	ID        uint64  `json:"-"`
	Name      string  `json:"name,omitempty"`
	IconName  string  `json:"iconName,omitempty"`
	Location  string  `json:"location,omitempty"`
	Company   string  `json:"company,omitempty"`
	Website   string  `json:"website,omitempty"`
	Bio       *string `json:"bio,omitempty"`
	PostCount uint    `json:"postCount,omitempty"`
}

// SelectProfile ...
func (da *TableTypeUser) SelectProfile(queryable dbx.Queryable, id uint64) (*UserTableSelectProfileResult, error) {
	result := &UserTableSelectProfileResult{}
	err := queryable.QueryRow("SELECT `id`, `name`, `icon_name`, `location`, `company`, `website`, `bio`, `post_count` FROM `user` WHERE `id` = ?", id).Scan(&result.ID, &result.Name, &result.IconName, &result.Location, &result.Company, &result.Website, &result.Bio, &result.PostCount)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// UserTableSelectSessionDataResult ...
type UserTableSelectSessionDataResult struct {
	ID       uint64 `json:"id,omitempty"`
	Name     string `json:"name,omitempty"`
	IconName string `json:"iconName,omitempty"`
}

// SelectSessionData ...
func (da *TableTypeUser) SelectSessionData(queryable dbx.Queryable, id uint64) (*UserTableSelectSessionDataResult, error) {
	result := &UserTableSelectSessionDataResult{}
	err := queryable.QueryRow("SELECT `id`, `name`, `icon_name` FROM `user` WHERE `id` = ?", id).Scan(&result.ID, &result.Name, &result.IconName)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// UpdateBio ...
func (da *TableTypeUser) UpdateBio(queryable dbx.Queryable, id uint64, bio *string) error {
	result, err := queryable.Exec("UPDATE `user` SET `bio` = ? WHERE `id` = ?", bio, id)
	return dbx.CheckOneRowAffectedWithError(result, err)
}

// UpdateIconName ...
func (da *TableTypeUser) UpdateIconName(queryable dbx.Queryable, id uint64, iconName string) error {
	result, err := queryable.Exec("UPDATE `user` SET `icon_name` = ? WHERE `id` = ?", iconName, id)
	return dbx.CheckOneRowAffectedWithError(result, err)
}

// UpdatePostCount ...
func (da *TableTypeUser) UpdatePostCount(queryable dbx.Queryable, userID uint64, offset int) error {
	result, err := queryable.Exec("UPDATE `user` SET `post_count` = `post_count` + ? WHERE `id` = ?", offset, userID)
	return dbx.CheckOneRowAffectedWithError(result, err)
}

// UpdateProfile ...
func (da *TableTypeUser) UpdateProfile(queryable dbx.Queryable, id uint64, name string, website string, company string, location string) error {
	result, err := queryable.Exec("UPDATE `user` SET `name` = ?, `website` = ?, `company` = ?, `location` = ? WHERE `id` = ?", name, website, company, location, id)
	return dbx.CheckOneRowAffectedWithError(result, err)
}
