/*
 * Copyright (C) The Qing Project. All rights reserved.
 *
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */

 /******************************************************************************************
 * This file was automatically generated by mingru (https://github.com/mgenware/mingru)
 * Do not edit this file manually, your changes will be overwritten.
 ******************************************************************************************/

package da

import (
	"database/sql"

	"github.com/mgenware/mingru-go-lib"
)

// TableTypeAnswerVote ...
type TableTypeAnswerVote struct {
}

// AnswerVote ...
var AnswerVote = &TableTypeAnswerVote{}

// MingruSQLName returns the name of this table.
func (mrTable *TableTypeAnswerVote) MingruSQLName() string {
	return "answer_vote"
}

// ------------ Actions ------------

// MyVote ...
func (mrTable *TableTypeAnswerVote) MyVote(mrQueryable mingru.Queryable, hostID uint64, userID uint64) (bool, error) {
	var result bool
	err := mrQueryable.QueryRow("SELECT `vote` FROM `answer_vote` WHERE (`host_id` = ? AND `user_id` = ?)", hostID, userID).Scan(&result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (mrTable *TableTypeAnswerVote) newDownVoteChild1(mrQueryable mingru.Queryable, hostID uint64, userID uint64) error {
	_, err := mrQueryable.Exec("INSERT INTO `answer_vote` (`host_id`, `user_id`, `vote`) VALUES (?, ?, 1)", hostID, userID)
	return err
}

func (mrTable *TableTypeAnswerVote) newDownVoteChild2(mrQueryable mingru.Queryable, hostID uint64) error {
	result, err := mrQueryable.Exec("UPDATE `answer` SET `down_votes` = `down_votes` + 1, `votes` = `votes` + -1 WHERE `id` = ?", hostID)
	return mingru.CheckOneRowAffectedWithError(result, err)
}

// NewDownVote ...
func (mrTable *TableTypeAnswerVote) NewDownVote(db *sql.DB, hostID uint64, userID uint64) error {
	txErr := mingru.Transact(db, func(tx *sql.Tx) error {
		var err error
		err = mrTable.newDownVoteChild1(tx, hostID, userID)
		if err != nil {
			return err
		}
		err = mrTable.newDownVoteChild2(tx, hostID)
		if err != nil {
			return err
		}
		return nil
	})
	return txErr
}

func (mrTable *TableTypeAnswerVote) newUpVoteChild1(mrQueryable mingru.Queryable, hostID uint64, userID uint64) error {
	_, err := mrQueryable.Exec("INSERT INTO `answer_vote` (`host_id`, `user_id`, `vote`) VALUES (?, ?, 1)", hostID, userID)
	return err
}

func (mrTable *TableTypeAnswerVote) newUpVoteChild2(mrQueryable mingru.Queryable, hostID uint64) error {
	result, err := mrQueryable.Exec("UPDATE `answer` SET `up_votes` = `up_votes` + 1, `votes` = `votes` + 1 WHERE `id` = ?", hostID)
	return mingru.CheckOneRowAffectedWithError(result, err)
}

// NewUpVote ...
func (mrTable *TableTypeAnswerVote) NewUpVote(db *sql.DB, hostID uint64, userID uint64) error {
	txErr := mingru.Transact(db, func(tx *sql.Tx) error {
		var err error
		err = mrTable.newUpVoteChild1(tx, hostID, userID)
		if err != nil {
			return err
		}
		err = mrTable.newUpVoteChild2(tx, hostID)
		if err != nil {
			return err
		}
		return nil
	})
	return txErr
}

func (mrTable *TableTypeAnswerVote) retractDownVoteChild1(mrQueryable mingru.Queryable, hostID uint64, userID uint64) error {
	result, err := mrQueryable.Exec("DELETE FROM `answer_vote` WHERE (`host_id` = ? AND `user_id` = ?)", hostID, userID)
	return mingru.CheckOneRowAffectedWithError(result, err)
}

func (mrTable *TableTypeAnswerVote) retractDownVoteChild2(mrQueryable mingru.Queryable, hostID uint64) error {
	result, err := mrQueryable.Exec("UPDATE `answer` SET `down_votes` = `down_votes` + -1, `votes` = `votes` + 1 WHERE `id` = ?", hostID)
	return mingru.CheckOneRowAffectedWithError(result, err)
}

// RetractDownVote ...
func (mrTable *TableTypeAnswerVote) RetractDownVote(db *sql.DB, hostID uint64, userID uint64) error {
	txErr := mingru.Transact(db, func(tx *sql.Tx) error {
		var err error
		err = mrTable.retractDownVoteChild1(tx, hostID, userID)
		if err != nil {
			return err
		}
		err = mrTable.retractDownVoteChild2(tx, hostID)
		if err != nil {
			return err
		}
		return nil
	})
	return txErr
}

func (mrTable *TableTypeAnswerVote) retractUpVoteChild1(mrQueryable mingru.Queryable, hostID uint64, userID uint64) error {
	result, err := mrQueryable.Exec("DELETE FROM `answer_vote` WHERE (`host_id` = ? AND `user_id` = ?)", hostID, userID)
	return mingru.CheckOneRowAffectedWithError(result, err)
}

func (mrTable *TableTypeAnswerVote) retractUpVoteChild2(mrQueryable mingru.Queryable, hostID uint64) error {
	result, err := mrQueryable.Exec("UPDATE `answer` SET `up_votes` = `up_votes` + -1, `votes` = `votes` + -1 WHERE `id` = ?", hostID)
	return mingru.CheckOneRowAffectedWithError(result, err)
}

// RetractUpVote ...
func (mrTable *TableTypeAnswerVote) RetractUpVote(db *sql.DB, hostID uint64, userID uint64) error {
	txErr := mingru.Transact(db, func(tx *sql.Tx) error {
		var err error
		err = mrTable.retractUpVoteChild1(tx, hostID, userID)
		if err != nil {
			return err
		}
		err = mrTable.retractUpVoteChild2(tx, hostID)
		if err != nil {
			return err
		}
		return nil
	})
	return txErr
}

func (mrTable *TableTypeAnswerVote) switchToDownVoteChild1(mrQueryable mingru.Queryable, hostID uint64, userID uint64) error {
	result, err := mrQueryable.Exec("UPDATE `answer_vote` SET `vote` = 0 WHERE (`host_id` = ? AND `user_id` = ?)", hostID, userID)
	return mingru.CheckOneRowAffectedWithError(result, err)
}

func (mrTable *TableTypeAnswerVote) switchToDownVoteChild2(mrQueryable mingru.Queryable, hostID uint64) error {
	result, err := mrQueryable.Exec("UPDATE `answer` SET `up_votes` = `up_votes` + -1, `down_votes` = `down_votes` + 1, `votes` = `votes` + -2 WHERE `id` = ?", hostID)
	return mingru.CheckOneRowAffectedWithError(result, err)
}

// SwitchToDownVote ...
func (mrTable *TableTypeAnswerVote) SwitchToDownVote(db *sql.DB, hostID uint64, userID uint64) error {
	txErr := mingru.Transact(db, func(tx *sql.Tx) error {
		var err error
		err = mrTable.switchToDownVoteChild1(tx, hostID, userID)
		if err != nil {
			return err
		}
		err = mrTable.switchToDownVoteChild2(tx, hostID)
		if err != nil {
			return err
		}
		return nil
	})
	return txErr
}

func (mrTable *TableTypeAnswerVote) switchToUpVoteChild1(mrQueryable mingru.Queryable, hostID uint64, userID uint64) error {
	result, err := mrQueryable.Exec("UPDATE `answer_vote` SET `vote` = 1 WHERE (`host_id` = ? AND `user_id` = ?)", hostID, userID)
	return mingru.CheckOneRowAffectedWithError(result, err)
}

func (mrTable *TableTypeAnswerVote) switchToUpVoteChild2(mrQueryable mingru.Queryable, hostID uint64) error {
	result, err := mrQueryable.Exec("UPDATE `answer` SET `up_votes` = `up_votes` + 1, `down_votes` = `down_votes` + -1, `votes` = `votes` + 2 WHERE `id` = ?", hostID)
	return mingru.CheckOneRowAffectedWithError(result, err)
}

// SwitchToUpVote ...
func (mrTable *TableTypeAnswerVote) SwitchToUpVote(db *sql.DB, hostID uint64, userID uint64) error {
	txErr := mingru.Transact(db, func(tx *sql.Tx) error {
		var err error
		err = mrTable.switchToUpVoteChild1(tx, hostID, userID)
		if err != nil {
			return err
		}
		err = mrTable.switchToUpVoteChild2(tx, hostID)
		if err != nil {
			return err
		}
		return nil
	})
	return txErr
}
