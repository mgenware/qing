 /******************************************************************************************
 * This code was automatically generated by mingru (https://github.com/mgenware/mingru)
 * Do not edit this file manually, your changes will be overwritten.
 ******************************************************************************************/

package da

import (
	"time"

	"github.com/mgenware/go-packagex/v5/dbx"
)

// TableTypePost ...
type TableTypePost struct {
}

// Post ...
var Post = &TableTypePost{}

// ------------ Actions ------------

// InsertPost ...
func (da *TableTypePost) InsertPost(queryable dbx.Queryable, title string, content string, userID uint64) (uint64, error) {
	result, err := queryable.Exec("INSERT INTO `post` (`title`, `content`, `user_id`, `created_at`, `modified_at`, `likes`, `cmt_count`) VALUES (?, ?, ?, NOW(), NOW(), 0, 0)", title, content, userID)
	return dbx.GetLastInsertIDUint64WithError(result, err)
}

// PostTablePostsByUserResult ...
type PostTablePostsByUserResult struct {
	ID         uint64
	Title      string
	Content    string
	CreatedAt  time.Time
	ModifiedAt time.Time
}

// PostsByUser ...
func (da *TableTypePost) PostsByUser(queryable dbx.Queryable, id uint64, limit int, offset int) ([]*PostTablePostsByUserResult, error) {
	rows, err := queryable.Query("SELECT `id`, `title`, `content`, `created_at`, `modified_at` FROM `post` WHERE `id` = ? LIMIT ? OFFSET ?", id, limit, offset)
	if err != nil {
		return nil, err
	}
	result := make([]*PostTablePostsByUserResult, 0, limit)
	defer rows.Close()
	for rows.Next() {
		item := &PostTablePostsByUserResult{}
		err = rows.Scan(&item.ID, &item.Title, &item.Content, &item.CreatedAt, &item.ModifiedAt)
		if err != nil {
			return nil, err
		}
		result = append(result, item)
	}
	err = rows.Err()
	if err != nil {
		return nil, err
	}
	return result, nil
}
