/*
 * Copyright (C) The Qing Project. All rights reserved.
 *
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */

 /******************************************************************************************
 * This file was automatically generated by mingru (https://github.com/mgenware/mingru)
 * Do not edit this file manually, your changes will be overwritten.
 ******************************************************************************************/

package da

import (
	"database/sql"
	"time"

	"github.com/mgenware/mingru-go-lib"
)

// ------------ Result types ------------

// CmtData ...
type CmtData struct {
	ContentHTML   string    `json:"contentHTML,omitempty"`
	HasLiked      *uint64   `json:"hasLiked,omitempty"`
	ID            uint64    `json:"-"`
	Likes         uint      `json:"likes,omitempty"`
	RawCreatedAt  time.Time `json:"-"`
	RawModifiedAt time.Time `json:"-"`
	ReplyCount    uint      `json:"replyCount,omitempty"`
	UserIconName  string    `json:"-"`
	UserID        uint64    `json:"-"`
	UserName      string    `json:"userName,omitempty"`
}

// EntityGetSrcResult ...
type EntityGetSrcResult struct {
	ContentHTML string `json:"contentHTML,omitempty"`
	Title       string `json:"title,omitempty"`
}

// FindUserResult ...
type FindUserResult struct {
	IconName string `json:"-"`
	ID       uint64 `json:"-"`
	Name     string `json:"name,omitempty"`
}

// UserThreadInterface ...
type UserThreadInterface struct {
	ID            uint64     `json:"-"`
	LastRepliedAt *time.Time `json:"lastRepliedAt,omitempty"`
	RawCreatedAt  time.Time  `json:"-"`
	RawModifiedAt time.Time  `json:"-"`
	ThreadType    int        `json:"threadType,omitempty"`
	Title         string     `json:"title,omitempty"`
	UserIconName  string     `json:"-"`
	UserID        uint64     `json:"-"`
	UserName      string     `json:"-"`
	Value1        uint       `json:"value1,omitempty"`
	Value2        uint       `json:"value2,omitempty"`
	Value3        uint       `json:"value3,omitempty"`
}

// ------------ Interfaces ------------

// CmtInterface ...
type CmtInterface interface {
	InsertCmt(db *sql.DB, parentID *uint64, contentHTML string, userID uint64, hostID uint64, sanitizedStub int, captStub int) (uint64, error)
	InsertReply(db *sql.DB, parentID uint64, contentHTML string, userID uint64, hostID uint64, sanitizedStub int, captStub int) (uint64, error)
	SelectCmts(queryable mingru.Queryable, hostID uint64, page int, pageSize int) ([]CmtData, bool, error)
	SelectCmtsWithLike(queryable mingru.Queryable, viewerUserID uint64, hostID uint64, page int, pageSize int) ([]CmtData, bool, error)
}

// LikeInterface ...
type LikeInterface interface {
	CancelLike(db *sql.DB, hostID uint64, userID uint64) error
	HasLiked(queryable mingru.Queryable, hostID uint64, userID uint64) (bool, error)
	Like(db *sql.DB, hostID uint64, userID uint64) error
}

// ReplyInterface ...
type ReplyInterface interface {
	SelectReplies(queryable mingru.Queryable, parentID *uint64, page int, pageSize int) ([]CmtData, bool, error)
	SelectRepliesWithLike(queryable mingru.Queryable, viewerUserID uint64, parentID *uint64, page int, pageSize int) ([]CmtData, bool, error)
}

// VoteInterface ...
type VoteInterface interface {
	MyVote(queryable mingru.Queryable, hostID uint64, userID uint64) (bool, error)
	NewDownVote(db *sql.DB, hostID uint64, userID uint64) error
	NewUpVote(db *sql.DB, hostID uint64, userID uint64) error
	RetractDownVote(db *sql.DB, hostID uint64, userID uint64) error
	RetractUpVote(db *sql.DB, hostID uint64, userID uint64) error
	SwitchToDownVote(db *sql.DB, hostID uint64, userID uint64) error
	SwitchToUpVote(db *sql.DB, hostID uint64, userID uint64) error
}
