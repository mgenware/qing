/*
 * Copyright (C) The Qing Project. All rights reserved.
 *
 * Use of this source code is governed by a license that can
 * be found in the LICENSE file.
 */

 /******************************************************************************************
  * This file was automatically generated by mingru (https://github.com/mgenware/mingru)
  * Do not edit this file manually, your changes will be overwritten.
  ******************************************************************************************/

package da

import (
	"database/sql"
	"time"

	"github.com/mgenware/mingru-go-lib"
)

// ------------ Result types ------------

// CmtData ...
type CmtData struct {
	ContentHTML  string    `json:"contentHTML,omitempty"`
	CreatedAt    time.Time `json:"createdAt,omitempty"`
	HasLiked     *uint64   `json:"hasLiked,omitempty"`
	ID           uint64    `json:"-"`
	Likes        uint      `json:"likes,omitempty"`
	ModifiedAt   time.Time `json:"modifiedAt,omitempty"`
	ReplyCount   uint      `json:"replyCount,omitempty"`
	ToUserID     uint64    `json:"-"`
	ToUserName   string    `json:"toUserName,omitempty"`
	UserIconName string    `json:"-"`
	UserID       uint64    `json:"-"`
	UserName     string    `json:"userName,omitempty"`
}

// EntityGetSrcResult ...
type EntityGetSrcResult struct {
	ContentHTML string `json:"contentHTML,omitempty"`
	Title       string `json:"title,omitempty"`
}

// FindUserResult ...
type FindUserResult struct {
	IconName string `json:"-"`
	ID       uint64 `json:"-"`
	Name     string `json:"name,omitempty"`
	Status   string `json:"status,omitempty"`
}

// UserThreadInterface ...
type UserThreadInterface struct {
	CreatedAt     time.Time  `json:"createdAt,omitempty"`
	ID            uint64     `json:"-"`
	LastRepliedAt *time.Time `json:"lastRepliedAt,omitempty"`
	ModifiedAt    time.Time  `json:"modifiedAt,omitempty"`
	ThreadType    int        `json:"threadType,omitempty"`
	Title         string     `json:"title,omitempty"`
	UserIconName  string     `json:"-"`
	UserID        uint64     `json:"-"`
	UserName      string     `json:"-"`
	Value1        uint       `json:"value1,omitempty"`
	Value2        uint       `json:"value2,omitempty"`
	Value3        uint       `json:"value3,omitempty"`
}

// ------------ Interfaces ------------

// CmtInterface ...
type CmtInterface interface {
	DeleteCmt(db *sql.DB, id uint64, userID uint64) error
	DeleteReply(db *sql.DB, id uint64, userID uint64) error
	InsertCmt(db *sql.DB, content string, userID uint64, hostID uint64, sanitizedStub int, captStub int) (uint64, error)
	InsertReply(db *sql.DB, content string, userID uint64, toUserID uint64, parentID uint64, hostID uint64, sanitizedStub int, captStub int) (uint64, error)
	SelectCmts(queryable mingru.Queryable, hostID uint64, page int, pageSize int) ([]CmtData, bool, error)
	SelectCmtsWithLike(queryable mingru.Queryable, viewerUserID uint64, hostID uint64, page int, pageSize int) ([]CmtData, bool, error)
}

// LikeInterface ...
type LikeInterface interface {
	CancelLike(db *sql.DB, hostID uint64, userID uint64) error
	HasLiked(queryable mingru.Queryable, hostID uint64, userID uint64) (bool, error)
	Like(db *sql.DB, hostID uint64, userID uint64) error
}

// ReplyInterface ...
type ReplyInterface interface {
	SelectReplies(queryable mingru.Queryable, parentID uint64, page int, pageSize int) ([]CmtData, bool, error)
}
