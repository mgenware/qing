/*
 * Copyright (C) The Qing Project. All rights reserved.
 *
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */

 /******************************************************************************************
 * This file was automatically generated by mingru (https://github.com/mgenware/mingru)
 * Do not edit this file manually, your changes will be overwritten.
 ******************************************************************************************/

package da

import (
	"database/sql"
	"time"

	"github.com/mgenware/mingru-go-lib"
)

// ------------ Result types ------------

type CmtResult struct {
	CmtCount      uint      `json:"cmtCount,omitempty"`
	ContentHTML   string    `json:"contentHTML,omitempty"`
	ID            uint64    `json:"-"`
	IsLiked       *uint64   `json:"isLiked,omitempty"`
	Likes         uint      `json:"likes,omitempty"`
	RawCreatedAt  time.Time `json:"-"`
	RawModifiedAt time.Time `json:"-"`
	UserIconName  string    `json:"-"`
	UserID        uint64    `json:"-"`
	UserName      string    `json:"userName,omitempty"`
}

type EntityGetSrcResult struct {
	ContentHTML string `json:"contentHTML,omitempty"`
	Title       string `json:"title,omitempty"`
}

type FindUserResult struct {
	IconName string `json:"-"`
	ID       uint64 `json:"-"`
	Name     string `json:"name,omitempty"`
}

type ThreadFeedResult struct {
	ID            uint64     `json:"-"`
	LastRepliedAt *time.Time `json:"lastRepliedAt,omitempty"`
	Likes         uint       `json:"likes,omitempty"`
	MsgCount      uint       `json:"msgCount,omitempty"`
	RawCreatedAt  time.Time  `json:"-"`
	RawModifiedAt time.Time  `json:"-"`
	Title         string     `json:"title,omitempty"`
	UserIconName  string     `json:"-"`
	UserID        uint64     `json:"-"`
	UserName      string     `json:"-"`
}

type ThreadMsgResult struct {
	CmtCount      uint      `json:"cmtCount,omitempty"`
	ContentHTML   string    `json:"contentHTML,omitempty"`
	ID            uint64    `json:"-"`
	IsLiked       *uint64   `json:"isLiked,omitempty"`
	Likes         uint      `json:"likes,omitempty"`
	RawCreatedAt  time.Time `json:"-"`
	RawModifiedAt time.Time `json:"-"`
	ThreadID      uint64    `json:"threadID,omitempty"`
	UserIconName  string    `json:"-"`
	UserID        uint64    `json:"-"`
	UserName      string    `json:"-"`
}

// ------------ Interfaces ------------

type CmtHostTableInterface interface {
	SelectReplies(mrQueryable mingru.Queryable, parentID *uint64, page int, pageSize int) ([]CmtResult, bool, error)
	SelectRepliesWithLikes(mrQueryable mingru.Queryable, viewerUserID uint64, parentID *uint64, page int, pageSize int) ([]CmtResult, bool, error)
	SelectRootCmts(mrQueryable mingru.Queryable, contentBaseCmtTableParam mingru.Table, hostID uint64, page int, pageSize int) ([]CmtResult, bool, error)
	SelectRootCmtsWithLikes(mrQueryable mingru.Queryable, contentBaseCmtTableParam mingru.Table, viewerUserID uint64, hostID uint64, page int, pageSize int) ([]CmtResult, bool, error)
}

type LikeInterface interface {
	CancelLike(db *sql.DB, hostID uint64, userID uint64) error
	HasLiked(mrQueryable mingru.Queryable, hostID uint64, userID uint64) (bool, error)
	Like(db *sql.DB, hostID uint64, userID uint64) error
}
