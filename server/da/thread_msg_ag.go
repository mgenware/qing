/*
 * Copyright (C) The Qing Project. All rights reserved.
 *
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */

 /******************************************************************************************
 * This file was automatically generated by mingru (https://github.com/mgenware/mingru)
 * Do not edit this file manually, your changes will be overwritten.
 ******************************************************************************************/

package da

import (
	"database/sql"
	"fmt"
	"time"

	"github.com/mgenware/mingru-go-lib"
)

type ThreadMsgAGType struct {
}

var ThreadMsg = &ThreadMsgAGType{}

// ------------ Actions ------------

func (mrTable *ThreadMsgAGType) deleteItemChild1(mrQueryable mingru.Queryable, id uint64, userID uint64) error {
	result, err := mrQueryable.Exec("DELETE FROM `thread_msg` WHERE (`id` = ? AND `user_id` = ?)", id, userID)
	return mingru.CheckOneRowAffectedWithError(result, err)
}

func (mrTable *ThreadMsgAGType) deleteItemChild2(mrQueryable mingru.Queryable, id uint64) error {
	return UserStats.UpdateThreadMsgCount(mrQueryable, id, -1)
}

func (mrTable *ThreadMsgAGType) deleteItemChild3(mrQueryable mingru.Queryable, threadID uint64) error {
	return Thread.UpdateMsgCount(mrQueryable, threadID, -1)
}

func (mrTable *ThreadMsgAGType) DeleteItem(db *sql.DB, id uint64, userID uint64, threadID uint64) error {
	txErr := mingru.Transact(db, func(tx *sql.Tx) error {
		var err error
		err = mrTable.deleteItemChild1(tx, id, userID)
		if err != nil {
			return err
		}
		err = mrTable.deleteItemChild2(tx, userID)
		if err != nil {
			return err
		}
		err = mrTable.deleteItemChild3(tx, threadID)
		if err != nil {
			return err
		}
		return nil
	})
	return txErr
}

func (mrTable *ThreadMsgAGType) EditItem(mrQueryable mingru.Queryable, id uint64, userID uint64, contentHTML string, sanitizedStub int) error {
	result, err := mrQueryable.Exec("UPDATE `thread_msg` SET `modified_at` = NOW(3), `content` = ? WHERE (`id` = ? AND `user_id` = ?)", contentHTML, id, userID)
	return mingru.CheckOneRowAffectedWithError(result, err)
}

func (mrTable *ThreadMsgAGType) insertItemChild1(mrQueryable mingru.Queryable, userID uint64, contentHTML string, threadID uint64) (uint64, error) {
	result, err := mrQueryable.Exec("INSERT INTO `thread_msg` (`created_at`, `cmt_count`, `likes`, `user_id`, `content`, `thread_id`, `modified_at`) VALUES (NOW(3), 0, 0, ?, ?, ?, `created_at`)", userID, contentHTML, threadID)
	return mingru.GetLastInsertIDUint64WithError(result, err)
}

func (mrTable *ThreadMsgAGType) insertItemChild2(mrQueryable mingru.Queryable, id uint64) error {
	return UserStats.UpdateThreadMsgCount(mrQueryable, id, 1)
}

func (mrTable *ThreadMsgAGType) insertItemChild3(mrQueryable mingru.Queryable, id uint64) error {
	return Thread.UpdateMsgCount(mrQueryable, id, 1)
}

func (mrTable *ThreadMsgAGType) InsertItem(db *sql.DB, userID uint64, contentHTML string, threadID uint64, sanitizedStub int, captStub int) (uint64, error) {
	var insertedIDExported uint64
	txErr := mingru.Transact(db, func(tx *sql.Tx) error {
		var err error
		insertedID, err := mrTable.insertItemChild1(tx, userID, contentHTML, threadID)
		if err != nil {
			return err
		}
		err = mrTable.insertItemChild2(tx, userID)
		if err != nil {
			return err
		}
		err = mrTable.insertItemChild3(tx, threadID)
		if err != nil {
			return err
		}
		insertedIDExported = insertedID
		return nil
	})
	return insertedIDExported, txErr
}

type ThreadMsgAGSelectItemByIDResult struct {
	CmtCount      uint      `json:"cmtCount,omitempty"`
	ContentHTML   string    `json:"contentHTML,omitempty"`
	ID            uint64    `json:"-"`
	Likes         uint      `json:"likes,omitempty"`
	RawCreatedAt  time.Time `json:"-"`
	RawModifiedAt time.Time `json:"-"`
	ThreadID      uint64    `json:"threadID,omitempty"`
	UserIconName  string    `json:"-"`
	UserID        uint64    `json:"-"`
	UserName      string    `json:"-"`
}

func (mrTable *ThreadMsgAGType) SelectItemByID(mrQueryable mingru.Queryable, id uint64) (ThreadMsgAGSelectItemByIDResult, error) {
	var result ThreadMsgAGSelectItemByIDResult
	err := mrQueryable.QueryRow("SELECT `thread_msg`.`id`, `thread_msg`.`user_id`, `join_1`.`name`, `join_1`.`icon_name`, `thread_msg`.`created_at`, `thread_msg`.`modified_at`, `thread_msg`.`content`, `thread_msg`.`likes`, `thread_msg`.`cmt_count`, `thread_msg`.`thread_id` FROM `thread_msg` AS `thread_msg` INNER JOIN `user` AS `join_1` ON `join_1`.`id` = `thread_msg`.`user_id` WHERE `thread_msg`.`id` = ?", id).Scan(&result.ID, &result.UserID, &result.UserName, &result.UserIconName, &result.RawCreatedAt, &result.RawModifiedAt, &result.ContentHTML, &result.Likes, &result.CmtCount, &result.ThreadID)
	if err != nil {
		return result, err
	}
	return result, nil
}

type ThreadMsgAGSelectItemsForPostCenterOrderBy1 int

const (
	ThreadMsgAGSelectItemsForPostCenterOrderBy1CreatedAt ThreadMsgAGSelectItemsForPostCenterOrderBy1 = iota
	ThreadMsgAGSelectItemsForPostCenterOrderBy1Likes
	ThreadMsgAGSelectItemsForPostCenterOrderBy1CmtCount
)

type ThreadMsgAGSelectItemsForPostCenterResult struct {
	ID            uint64    `json:"-"`
	Likes         uint      `json:"likes,omitempty"`
	RawCreatedAt  time.Time `json:"-"`
	RawModifiedAt time.Time `json:"-"`
	ThreadID      uint64    `json:"threadID,omitempty"`
}

func (mrTable *ThreadMsgAGType) SelectItemsForPostCenter(mrQueryable mingru.Queryable, userID uint64, page int, pageSize int, orderBy1 ThreadMsgAGSelectItemsForPostCenterOrderBy1, orderBy1Desc bool) ([]ThreadMsgAGSelectItemsForPostCenterResult, bool, error) {
	var orderBy1SQL string
	switch orderBy1 {
	case ThreadMsgAGSelectItemsForPostCenterOrderBy1CreatedAt:
		orderBy1SQL = "`created_at`"
	case ThreadMsgAGSelectItemsForPostCenterOrderBy1Likes:
		orderBy1SQL = "`likes`"
	case ThreadMsgAGSelectItemsForPostCenterOrderBy1CmtCount:
		orderBy1SQL = "`cmt_count`"
	default:
		err := fmt.Errorf("unsupported value %v", orderBy1)
		return nil, false, err
	}
	if orderBy1Desc {
		orderBy1SQL += " DESC"
	}

	if page <= 0 {
		err := fmt.Errorf("invalid page %v", page)
		return nil, false, err
	}
	if pageSize <= 0 {
		err := fmt.Errorf("invalid page size %v", pageSize)
		return nil, false, err
	}
	limit := pageSize + 1
	offset := (page - 1) * pageSize
	max := pageSize
	rows, err := mrQueryable.Query("SELECT `id`, `created_at`, `modified_at`, `likes`, `thread_id` FROM `thread_msg` WHERE `user_id` = ? ORDER BY "+orderBy1SQL+" LIMIT ? OFFSET ?", userID, limit, offset)
	if err != nil {
		return nil, false, err
	}
	result := make([]ThreadMsgAGSelectItemsForPostCenterResult, 0, limit)
	itemCounter := 0
	defer rows.Close()
	for rows.Next() {
		itemCounter++
		if itemCounter <= max {
			var item ThreadMsgAGSelectItemsForPostCenterResult
			err = rows.Scan(&item.ID, &item.RawCreatedAt, &item.RawModifiedAt, &item.Likes, &item.ThreadID)
			if err != nil {
				return nil, false, err
			}
			result = append(result, item)
		}
	}
	err = rows.Err()
	if err != nil {
		return nil, false, err
	}
	return result, itemCounter > len(result), nil
}

type ThreadMsgAGSelectItemsForUserProfileResult struct {
	ID            uint64    `json:"-"`
	RawCreatedAt  time.Time `json:"-"`
	RawModifiedAt time.Time `json:"-"`
	ThreadID      uint64    `json:"threadID,omitempty"`
}

func (mrTable *ThreadMsgAGType) SelectItemsForUserProfile(mrQueryable mingru.Queryable, userID uint64, page int, pageSize int) ([]ThreadMsgAGSelectItemsForUserProfileResult, bool, error) {
	if page <= 0 {
		err := fmt.Errorf("invalid page %v", page)
		return nil, false, err
	}
	if pageSize <= 0 {
		err := fmt.Errorf("invalid page size %v", pageSize)
		return nil, false, err
	}
	limit := pageSize + 1
	offset := (page - 1) * pageSize
	max := pageSize
	rows, err := mrQueryable.Query("SELECT `id`, `created_at`, `modified_at`, `thread_id` FROM `thread_msg` WHERE `user_id` = ? ORDER BY `created_at` DESC LIMIT ? OFFSET ?", userID, limit, offset)
	if err != nil {
		return nil, false, err
	}
	result := make([]ThreadMsgAGSelectItemsForUserProfileResult, 0, limit)
	itemCounter := 0
	defer rows.Close()
	for rows.Next() {
		itemCounter++
		if itemCounter <= max {
			var item ThreadMsgAGSelectItemsForUserProfileResult
			err = rows.Scan(&item.ID, &item.RawCreatedAt, &item.RawModifiedAt, &item.ThreadID)
			if err != nil {
				return nil, false, err
			}
			result = append(result, item)
		}
	}
	err = rows.Err()
	if err != nil {
		return nil, false, err
	}
	return result, itemCounter > len(result), nil
}

func (mrTable *ThreadMsgAGType) SelectItemSrc(mrQueryable mingru.Queryable, id uint64, userID uint64) (EntityGetSrcResult, error) {
	var result EntityGetSrcResult
	err := mrQueryable.QueryRow("SELECT `content` FROM `thread_msg` WHERE (`id` = ? AND `user_id` = ?)", id, userID).Scan(&result.ContentHTML)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (mrTable *ThreadMsgAGType) SelectMsgsByThread(mrQueryable mingru.Queryable, threadID uint64, page int, pageSize int) ([]ThreadMsgResult, bool, error) {
	if page <= 0 {
		err := fmt.Errorf("invalid page %v", page)
		return nil, false, err
	}
	if pageSize <= 0 {
		err := fmt.Errorf("invalid page size %v", pageSize)
		return nil, false, err
	}
	limit := pageSize + 1
	offset := (page - 1) * pageSize
	max := pageSize
	rows, err := mrQueryable.Query("SELECT `thread_msg`.`id`, `thread_msg`.`user_id`, `join_1`.`name`, `join_1`.`icon_name`, `thread_msg`.`created_at`, `thread_msg`.`modified_at`, `thread_msg`.`content`, `thread_msg`.`likes`, `thread_msg`.`cmt_count`, `thread_msg`.`thread_id` FROM `thread_msg` AS `thread_msg` INNER JOIN `user` AS `join_1` ON `join_1`.`id` = `thread_msg`.`user_id` WHERE `thread_msg`.`thread_id` = ? ORDER BY `thread_msg`.`likes` LIMIT ? OFFSET ?", threadID, limit, offset)
	if err != nil {
		return nil, false, err
	}
	result := make([]ThreadMsgResult, 0, limit)
	itemCounter := 0
	defer rows.Close()
	for rows.Next() {
		itemCounter++
		if itemCounter <= max {
			var item ThreadMsgResult
			err = rows.Scan(&item.ID, &item.UserID, &item.UserName, &item.UserIconName, &item.RawCreatedAt, &item.RawModifiedAt, &item.ContentHTML, &item.Likes, &item.CmtCount, &item.ThreadID)
			if err != nil {
				return nil, false, err
			}
			result = append(result, item)
		}
	}
	err = rows.Err()
	if err != nil {
		return nil, false, err
	}
	return result, itemCounter > len(result), nil
}

func (mrTable *ThreadMsgAGType) SelectMsgsByThreadWithLikes(mrQueryable mingru.Queryable, viewerUserID uint64, threadID uint64, page int, pageSize int) ([]ThreadMsgResult, bool, error) {
	if page <= 0 {
		err := fmt.Errorf("invalid page %v", page)
		return nil, false, err
	}
	if pageSize <= 0 {
		err := fmt.Errorf("invalid page size %v", pageSize)
		return nil, false, err
	}
	limit := pageSize + 1
	offset := (page - 1) * pageSize
	max := pageSize
	rows, err := mrQueryable.Query("SELECT `thread_msg`.`id`, `thread_msg`.`user_id`, `join_1`.`name`, `join_1`.`icon_name`, `thread_msg`.`created_at`, `thread_msg`.`modified_at`, `thread_msg`.`content`, `thread_msg`.`likes`, `thread_msg`.`cmt_count`, `thread_msg`.`thread_id`, `join_2`.`user_id` AS `is_liked` FROM `thread_msg` AS `thread_msg` INNER JOIN `user` AS `join_1` ON `join_1`.`id` = `thread_msg`.`user_id` LEFT JOIN `thread_msg_like` AS `join_2` ON `join_2`.`host_id` = `thread_msg`.`id` AND `join_2`.`user_id` = ? WHERE `thread_msg`.`thread_id` = ? ORDER BY `thread_msg`.`likes` LIMIT ? OFFSET ?", viewerUserID, threadID, limit, offset)
	if err != nil {
		return nil, false, err
	}
	result := make([]ThreadMsgResult, 0, limit)
	itemCounter := 0
	defer rows.Close()
	for rows.Next() {
		itemCounter++
		if itemCounter <= max {
			var item ThreadMsgResult
			err = rows.Scan(&item.ID, &item.UserID, &item.UserName, &item.UserIconName, &item.RawCreatedAt, &item.RawModifiedAt, &item.ContentHTML, &item.Likes, &item.CmtCount, &item.ThreadID, &item.IsLiked)
			if err != nil {
				return nil, false, err
			}
			result = append(result, item)
		}
	}
	err = rows.Err()
	if err != nil {
		return nil, false, err
	}
	return result, itemCounter > len(result), nil
}

func (mrTable *ThreadMsgAGType) SelectThread(mrQueryable mingru.Queryable, id uint64) (uint64, error) {
	var result uint64
	err := mrQueryable.QueryRow("SELECT `thread_id` FROM `thread_msg` WHERE `id` = ?", id).Scan(&result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (mrTable *ThreadMsgAGType) TestUpdateDates(mrQueryable mingru.Queryable, id uint64, rawCreatedAt time.Time, rawModifiedAt time.Time) error {
	result, err := mrQueryable.Exec("UPDATE `thread_msg` SET `created_at` = ?, `modified_at` = ? WHERE `id` = ?", rawCreatedAt, rawModifiedAt, id)
	return mingru.CheckOneRowAffectedWithError(result, err)
}
