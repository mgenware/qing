/*
 * Copyright (C) The Qing Project. All rights reserved.
 *
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */

 /******************************************************************************************
 * This file was automatically generated by mingru (https://github.com/mgenware/mingru)
 * Do not edit this file manually, your changes will be overwritten.
 ******************************************************************************************/

package da

import (
	"database/sql"

	"github.com/mgenware/mingru-go-lib"
)

// TableTypeUserPwd ...
type TableTypeUserPwd struct {
}

// UserPwd ...
var UserPwd = &TableTypeUserPwd{}

// ------------ Actions ------------

func (da *TableTypeUserPwd) addPwdBasedUserChild2(queryable mingru.Queryable, id uint64) error {
	return User.AddUserStatsEntryInternal(queryable, id)
}

func (da *TableTypeUserPwd) addPwdBasedUserChild3(queryable mingru.Queryable, id uint64) error {
	return UserAuth.AddUserAuth(queryable, id, 1)
}

func (da *TableTypeUserPwd) addPwdBasedUserChild4(queryable mingru.Queryable, id uint64, pwdHash string) error {
	return da.AddUserPwdInternal(queryable, id, pwdHash)
}

// AddPwdBasedUser ...
func (da *TableTypeUserPwd) AddPwdBasedUser(db *sql.DB, email string, name string, pwdHash string) (uint64, error) {
	var insertedUserIDExported uint64
	txErr := mingru.Transact(db, func(tx *sql.Tx) error {
		var err error
		insertedUserID, err := User.AddUserEntryInternal(tx, email, name)
		if err != nil {
			return err
		}
		err = da.addPwdBasedUserChild2(tx, insertedUserID)
		if err != nil {
			return err
		}
		err = da.addPwdBasedUserChild3(tx, insertedUserID)
		if err != nil {
			return err
		}
		err = da.addPwdBasedUserChild4(tx, insertedUserID, pwdHash)
		if err != nil {
			return err
		}
		insertedUserIDExported = insertedUserID
		return nil
	})
	return insertedUserIDExported, txErr
}

// AddUserPwdInternal ...
func (da *TableTypeUserPwd) AddUserPwdInternal(queryable mingru.Queryable, id uint64, pwdHash string) error {
	_, err := queryable.Exec("INSERT INTO `user_pwd` (`id`, `pwd_hash`) VALUES (?, ?)", id, pwdHash)
	return err
}

// SelectHashByID ...
func (da *TableTypeUserPwd) SelectHashByID(queryable mingru.Queryable, id uint64) (string, error) {
	var result string
	err := queryable.QueryRow("SELECT `pwd_hash` FROM `user_pwd` WHERE `id` = ?", id).Scan(&result)
	if err != nil {
		return result, err
	}
	return result, nil
}
