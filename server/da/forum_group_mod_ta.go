/*
 * Copyright (C) The Qing Project. All rights reserved.
 *
 * Use of this source code is governed by a license that can
 * be found in the LICENSE file.
 */

 /******************************************************************************************
  * This file was automatically generated by mingru (https://github.com/mgenware/mingru)
  * Do not edit this file manually, your changes will be overwritten.
  ******************************************************************************************/

package da

import "github.com/mgenware/mingru-go-lib"

// TableTypeForumGroupMod ...
type TableTypeForumGroupMod struct {
}

// ForumGroupMod ...
var ForumGroupMod = &TableTypeForumGroupMod{}

// ------------ Actions ------------

// DeleteMod ...
func (da *TableTypeForumGroupMod) DeleteMod(queryable mingru.Queryable, objectID uint64, userID uint64) error {
	result, err := queryable.Exec("DELETE FROM `forum_group_mod` WHERE (`object_id` = ? AND `user_id` = ?)", objectID, userID)
	return mingru.CheckOneRowAffectedWithError(result, err)
}

// InsertMod ...
func (da *TableTypeForumGroupMod) InsertMod(queryable mingru.Queryable, objectID uint64, userID uint64) error {
	_, err := queryable.Exec("INSERT INTO `forum_group_mod` (`object_id`, `user_id`) VALUES (?, ?)", objectID, userID)
	return err
}

// SelectIsMod ...
func (da *TableTypeForumGroupMod) SelectIsMod(queryable mingru.Queryable, objectID uint64, userID uint64) (bool, error) {
	var result bool
	err := queryable.QueryRow("SELECT EXISTS(SELECT * FROM `forum_group_mod` WHERE (`object_id` = ? AND `user_id` = ?))", objectID, userID).Scan(&result)
	if err != nil {
		return result, err
	}
	return result, nil
}
