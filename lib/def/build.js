/*
 * Copyright (C) 2022 The Qing Project. All rights reserved.
 *
 * Use of this source code is governed by a license that can
 * be found in the LICENSE file.
 */

import * as mfs from 'm-fs';
import * as sc from 'qing-shared-const';
import isObj from 'is-plain-obj';
import * as du from '@qing/devutil';

const outputDir = './g';
const header =
  du.copyrightString +
  ` /******************************************************************************************
* This code was automatically generated by \`@qing/def\`.
* Do not edit this file manually, your changes will be overwritten.
******************************************************************************************/

`;

async function buildJSONFileAsync(src, name) {
  const json = await mfs.readTextFileAsync(src);
  const pascalName = name.charAt(0).toUpperCase() + name.slice(1);

  const jsonObj = JSON.parse(json);
  if (!isObj(jsonObj)) {
    throw new Error(`Expect an object. Got ${json}`);
  }
  const goNamespace = `${name}def`;
  const goResult = sc.go.convert(jsonObj, {
    packageName: goNamespace,
    typeName: `${pascalName}Type`,
  });
  const jsContent = sc.js.convert(jsonObj, { flattenEnums: true });
  const dtsContent = sc.js.convert(jsonObj, { flattenEnums: true, dts: true });

  await Promise.all([
    mfs.writeFileAsync(`${outputDir}/${name}.js`, jsContent),
    mfs.writeFileAsync(`${outputDir}/${name}.d.ts`, dtsContent),
    mfs.writeFileAsync(`${du.serverPath(`a/def/${goNamespace}/${name}.go`)}`, header + goResult),
  ]);
}

async function buildConstantsAsync() {
  return Promise.all(['app', 'inf'].map((f) => buildJSONFileAsync(`./src/${f}.json`, f)));
}

await buildConstantsAsync();
