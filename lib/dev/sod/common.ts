/*
 * Copyright (C) 2021 The Qing Project. All rights reserved.
 *
 * Use of this source code is governed by a license that can
 * be found in the LICENSE file.
 */

export { copyrightString } from '../common/common.js';

export const attrPrefix = '__';

const allowedAttrs = new Set<string>();

export function checkAttr(attr: string) {
  if (!allowedAttrs.has(attr)) {
    throw new Error(`Unknown attr ${attr}`);
  }
}

export function addAllowedAttrs(attrs: string[]) {
  for (const attr of attrs) {
    allowedAttrs.add(attr);
  }
}

export type SourceDict = Record<string, Record<string, string>>;

export function noticeComment(input: string): string {
  return ` /******************************************************************************************
  * Do not edit this file manually.
  * Automatically generated via \`qing sod ${input}\`.
  * See \`lib/dev/sod/objects/${input}.yaml\` for details.
  ******************************************************************************************/\n\n`;
}

export function capitalize(s: string) {
  if (s == 'id') {
    return 'ID';
  }
  return s.charAt(0).toUpperCase() + s.slice(1);
}

export function trimEnd(s: string, suffix: string): string {
  if (s.endsWith(suffix)) {
    return s.substr(0, s.length - suffix.length);
  }
  return s;
}

export function getDictAttribute(dict: Record<string, string>, key: string): string | null {
  const val = dict[key];
  if (val) {
    delete dict[key];
    return val;
  }
  return null;
}

export interface ExtendsField {
  name: string;
  path: string;
}

export function parseExtendsFieldObj(obj: unknown): ExtendsField {
  if (typeof obj !== 'object') {
    throw new Error(`Expected an object, got ${JSON.stringify(obj)}`);
  }
  const objDict = obj as Record<string, string>;
  const { name, path } = objDict;
  if (!name) {
    throw new Error(`Missing name param. Got ${JSON.stringify(obj)}`);
  }
  if (!path) {
    throw new Error(`Missing path param. Got ${JSON.stringify(obj)}`);
  }
  return { name, path };
}
